// Code generated by Wire protocol buffer compiler, do not edit.
// Source: konem.data.protobuf.Status in konemwiremessage.proto
package konem.`data`.protobuf

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.missingRequiredFields
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class Status(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REQUIRED,
    schemaIndex = 0,
  )
  public val shortName: String,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REQUIRED,
    schemaIndex = 1,
  )
  public val errors: Int,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REQUIRED,
    schemaIndex = 2,
  )
  public val received: Int,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REQUIRED,
    schemaIndex = 3,
  )
  public val sent: Int,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REQUIRED,
    schemaIndex = 4,
  )
  public val description: String,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Status, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Status) return false
    if (unknownFields != other.unknownFields) return false
    if (shortName != other.shortName) return false
    if (errors != other.errors) return false
    if (received != other.received) return false
    if (sent != other.sent) return false
    if (description != other.description) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + shortName.hashCode()
      result = result * 37 + errors.hashCode()
      result = result * 37 + received.hashCode()
      result = result * 37 + sent.hashCode()
      result = result * 37 + description.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """shortName=${sanitize(shortName)}"""
    result += """errors=$errors"""
    result += """received=$received"""
    result += """sent=$sent"""
    result += """description=${sanitize(description)}"""
    return result.joinToString(prefix = "Status{", separator = ", ", postfix = "}")
  }

  public fun copy(
    shortName: String = this.shortName,
    errors: Int = this.errors,
    received: Int = this.received,
    sent: Int = this.sent,
    description: String = this.description,
    unknownFields: ByteString = this.unknownFields,
  ): Status = Status(shortName, errors, received, sent, description, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Status> = object : ProtoAdapter<Status>(
      FieldEncoding.LENGTH_DELIMITED, 
      Status::class, 
      "type.googleapis.com/konem.data.protobuf.Status", 
      PROTO_2, 
      null, 
      "konemwiremessage.proto"
    ) {
      override fun encodedSize(`value`: Status): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.shortName)
        size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.errors)
        size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.received)
        size += ProtoAdapter.INT32.encodedSizeWithTag(4, value.sent)
        size += ProtoAdapter.STRING.encodedSizeWithTag(5, value.description)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Status) {
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.shortName)
        ProtoAdapter.INT32.encodeWithTag(writer, 2, value.errors)
        ProtoAdapter.INT32.encodeWithTag(writer, 3, value.received)
        ProtoAdapter.INT32.encodeWithTag(writer, 4, value.sent)
        ProtoAdapter.STRING.encodeWithTag(writer, 5, value.description)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Status) {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.STRING.encodeWithTag(writer, 5, value.description)
        ProtoAdapter.INT32.encodeWithTag(writer, 4, value.sent)
        ProtoAdapter.INT32.encodeWithTag(writer, 3, value.received)
        ProtoAdapter.INT32.encodeWithTag(writer, 2, value.errors)
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.shortName)
      }

      override fun decode(reader: ProtoReader): Status {
        var shortName: String? = null
        var errors: Int? = null
        var received: Int? = null
        var sent: Int? = null
        var description: String? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> shortName = ProtoAdapter.STRING.decode(reader)
            2 -> errors = ProtoAdapter.INT32.decode(reader)
            3 -> received = ProtoAdapter.INT32.decode(reader)
            4 -> sent = ProtoAdapter.INT32.decode(reader)
            5 -> description = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Status(
          shortName = shortName ?: throw missingRequiredFields(shortName, "shortName"),
          errors = errors ?: throw missingRequiredFields(errors, "errors"),
          received = received ?: throw missingRequiredFields(received, "received"),
          sent = sent ?: throw missingRequiredFields(sent, "sent"),
          description = description ?: throw missingRequiredFields(description, "description"),
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Status): Status = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
