// Code generated by Wire protocol buffer compiler, do not edit.
// Source: konem.data.protobuf.KonemMessage in konemwiremessage.proto
package konem.`data`.protobuf

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.missingRequiredFields
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class KonemMessage(
  @field:WireField(
    tag = 1,
    adapter = "konem.data.protobuf.MessageType#ADAPTER",
    label = WireField.Label.REQUIRED,
    schemaIndex = 0,
  )
  public val messageType: MessageType,
  @field:WireField(
    tag = 2,
    adapter = "konem.data.protobuf.Unknown#ADAPTER",
    schemaIndex = 1,
  )
  public val unknown: Unknown? = null,
  @field:WireField(
    tag = 3,
    adapter = "konem.data.protobuf.Status#ADAPTER",
    schemaIndex = 2,
  )
  public val status: Status? = null,
  @field:WireField(
    tag = 4,
    adapter = "konem.data.protobuf.HeartBeat#ADAPTER",
    schemaIndex = 3,
  )
  public val heartBeat: HeartBeat? = null,
  @field:WireField(
    tag = 5,
    adapter = "konem.data.protobuf.Data#ADAPTER",
    declaredName = "data",
    schemaIndex = 4,
  )
  public val data_: Data? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<KonemMessage, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is KonemMessage) return false
    if (unknownFields != other.unknownFields) return false
    if (messageType != other.messageType) return false
    if (unknown != other.unknown) return false
    if (status != other.status) return false
    if (heartBeat != other.heartBeat) return false
    if (data_ != other.data_) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + messageType.hashCode()
      result = result * 37 + (unknown?.hashCode() ?: 0)
      result = result * 37 + (status?.hashCode() ?: 0)
      result = result * 37 + (heartBeat?.hashCode() ?: 0)
      result = result * 37 + (data_?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """messageType=$messageType"""
    if (unknown != null) result += """unknown=$unknown"""
    if (status != null) result += """status=$status"""
    if (heartBeat != null) result += """heartBeat=$heartBeat"""
    if (data_ != null) result += """data_=$data_"""
    return result.joinToString(prefix = "KonemMessage{", separator = ", ", postfix = "}")
  }

  public fun copy(
    messageType: MessageType = this.messageType,
    unknown: Unknown? = this.unknown,
    status: Status? = this.status,
    heartBeat: HeartBeat? = this.heartBeat,
    data_: Data? = this.data_,
    unknownFields: ByteString = this.unknownFields,
  ): KonemMessage = KonemMessage(messageType, unknown, status, heartBeat, data_, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<KonemMessage> = object : ProtoAdapter<KonemMessage>(
      FieldEncoding.LENGTH_DELIMITED, 
      KonemMessage::class, 
      "type.googleapis.com/konem.data.protobuf.KonemMessage", 
      PROTO_2, 
      null, 
      "konemwiremessage.proto"
    ) {
      override fun encodedSize(`value`: KonemMessage): Int {
        var size = value.unknownFields.size
        size += MessageType.ADAPTER.encodedSizeWithTag(1, value.messageType)
        size += Unknown.ADAPTER.encodedSizeWithTag(2, value.unknown)
        size += Status.ADAPTER.encodedSizeWithTag(3, value.status)
        size += HeartBeat.ADAPTER.encodedSizeWithTag(4, value.heartBeat)
        size += Data.ADAPTER.encodedSizeWithTag(5, value.data_)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: KonemMessage) {
        MessageType.ADAPTER.encodeWithTag(writer, 1, value.messageType)
        Unknown.ADAPTER.encodeWithTag(writer, 2, value.unknown)
        Status.ADAPTER.encodeWithTag(writer, 3, value.status)
        HeartBeat.ADAPTER.encodeWithTag(writer, 4, value.heartBeat)
        Data.ADAPTER.encodeWithTag(writer, 5, value.data_)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: KonemMessage) {
        writer.writeBytes(value.unknownFields)
        Data.ADAPTER.encodeWithTag(writer, 5, value.data_)
        HeartBeat.ADAPTER.encodeWithTag(writer, 4, value.heartBeat)
        Status.ADAPTER.encodeWithTag(writer, 3, value.status)
        Unknown.ADAPTER.encodeWithTag(writer, 2, value.unknown)
        MessageType.ADAPTER.encodeWithTag(writer, 1, value.messageType)
      }

      override fun decode(reader: ProtoReader): KonemMessage {
        var messageType: MessageType? = null
        var unknown: Unknown? = null
        var status: Status? = null
        var heartBeat: HeartBeat? = null
        var data_: Data? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              messageType = MessageType.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> unknown = Unknown.ADAPTER.decode(reader)
            3 -> status = Status.ADAPTER.decode(reader)
            4 -> heartBeat = HeartBeat.ADAPTER.decode(reader)
            5 -> data_ = Data.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return KonemMessage(
          messageType = messageType ?: throw missingRequiredFields(messageType, "messageType"),
          unknown = unknown,
          status = status,
          heartBeat = heartBeat,
          data_ = data_,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: KonemMessage): KonemMessage = value.copy(
        unknown = value.unknown?.let(Unknown.ADAPTER::redact),
        status = value.status?.let(Status.ADAPTER::redact),
        heartBeat = value.heartBeat?.let(HeartBeat.ADAPTER::redact),
        data_ = value.data_?.let(Data.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
